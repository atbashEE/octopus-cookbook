# 3. Logout and events

Now that we can do basic authentication and authorization, it is time to have a logout option and feedback on some actions of the user.

There will be 2 parts in this example, each concentrating on one of the topics of this chapter.

## 3.1 Main scenario - Logout

The code for this example can be found in the gitbook/ex3 directory of this [Git Repository](https://github.com/atbashEE/octopus-examples).

We will add a logout button to the examples we have created earlier. We also add the HTTPSession id value so that we can follow when the Session is invalidated by Octopus.

This text will start from the main scenario from the chapter 1 example.

### 3.1.1 Add Logout button

We add the logout button to the user page (user is authenticated at that moment)

* Add the following code as body of the _/pages/user.xhtml_ JSF view

        <h:form>
            authenticated user : #{loggedInUser}  <br/>
            Session id = #{session.id} <br/>
            <h:commandButton actionListener="#{loginBean.logout}" value="Logout"/>
        </h:form>

### 3.1.2 Add session info

We also add the session id to the _index.xhtml_ page.

* Place the following code below the a-tag

        Session id = #{session.id}

### 3.1.3 Add default page

We add a default page for the application.

* Add following config in the _web.xml_ page

        <welcome-file-list>
            <welcome-file>/index.xhtml</welcome-file>
        </welcome-file-list>

### 3.1.4 test the application

You can test the application

* Click on that logout button on the user page and see how the index page is shown again.

* Going to the secured user page needs authentication, so you can test following scenario (for the explanation about the session id values, see 3.2.2)

1. Go to (type in the URL address) index page _/index.xhtml_
2. Click on the secured link
3. Enter some credentials
4. Click on the logout button (try also scenario without clicking the button)
5. Click again on the secured link on the index page.
6. Enter some credentials, only needed when you have used the logout button in step 4!
6. Open a new tab and go to the index page
7. Click on the secured link
8. Credentials are needed when you haven't logged in already on the first tab.

## 3.2 Explanation

### 3.2.1 Add Logout button

The Logout button calls the required code to logout the user. It removes the Principal information and invalidates the HTTPSession.

The application is redirected to the welcome file page (actually there is a redirect to /) afterward. See alternative 1 to define a specific logout page.

Therefore you should not define the _action_ property of the commandButton because octopus defines the following page.

If you want to use this logout functionality in a programmatic way, inject an instance of **be.atbash.ee.security.octopus.view.OctopusJSFSecurityContext** and call the _logout()_ method.

### 3.2.2 Add session info

Perform the test scenario described in section 3.1.4 again and look closely at the session ids on the pages.

When we start on the _index.xhtml_ page, we have a sessionId printed.

After we have clicked on the secured link and authenticated yourself with the login page, we see the user page where we have printed the sessionId again. But this time it is a different one. This is because Octopus recreates the HTTPSession when the user logs in.

And when we click on the logout button, we end up on the index page again and now we see another value. During logout, the HTTPSession is also invalidated.

The session recreation during login can be disabled in case the copy of the session attributes gives you some problems. Set the **session.invalidate.login** to false within the _ocotpusConfig.properties_ file.

### 3.2.3 Add default page.

Since the default logout action is a redirection to /, adding the welcome file list page make sure the user sees a regular page after he has logged out.

### 3.3. Main scenario - events

There are various CDI events generated by Octopus, this example shows you the most important ones.

The code for this example can be found in the gitbook/ex3_part2 directory of this [Git Repository](https://github.com/atbashEE/octopus-examples).

We will add various observer methods to track these events.

This text will start with the main scenario from the previous example.

### 3.3.1 Add Observer methods

* Create a new class _EventObserver_
* Mark it is a CDI Application scoped bean
* Add methods for the various CDI events and write out their contents.

        @ApplicationScoped
        public class EventObserver {

           public void onLogin(@Observes LogonEvent logonEvent) {

             System.out.println(String.format("Log in of %s at %s", logonEvent.getUserPrincipal().getName(), new Date()));
           }

           public void onLogout(@Observes LogoutEvent logoutEvent) {

             System.out.println(String.format("Log out of %s at %s", logoutEvent.getUserPrincipal().getName(), new Date()));
           }

           public void onFailure(@Observes LogonFailureEvent failureEvent) {

             System.out.println(String.format("Invalid password for %s ", failureEvent.getToken().getPrincipal()));
           }

        }

### 3.3.2 Test the application

Test the application and use various scenarios

* Use a valid password (same as username)
* Click also on the logout button
* Use an invalid password (like something else than the username)

And watch the log for the various messages which appear there.

## 3.4 Explanation

_LogonEvent_, is thrown when the user has successfully logged on. At that moment, the Octopus Subject isn't updated yet, but all the information is available in the event (UserPrincipal and authenticationInfo from which it is created)

At the moment of the event, the new HTTPSession is already established.

The LogoutEvent is thrown just before the system will remove all the Principal information from the system and the HTTPSession will be invalidated.

The failure event happens in the case when the method _SecurityDataProvider#getAuthenticationInfo_ return null (because the user can't be found) or the _CredentialMatcher_(s) have decided that the Credentials aren't valid.

## 3.5 Where to go next

* Try the alternative/additional (see 3.6) to learn about the specification of a logout page.
* Look at the advanced permissions which are active during the Events. (see ???)
* See the chapter about the programmatic way of authenticating a user with the help of _Octopus(JSF)SecurityContext_ (see ???)
* Have a look at the chapter ??? to see which user is working with the app and how you can manipulate them.

## 3.6 Alternative/Additional

### 3.6.1 Specify logout page

In this alternative, I'll show you how you can define a custom logout page.

You can start from the main scenario created in 3.1.

* Create the _octopusConfig.properties_ file within the _src/main/resources_ directory so that it will be added to the classpath.
* Add a configuration entry for the logout page definition

        logoutPage = /logout.xhtml

* Create the _/logout.xhtml_ JSF page, and for example following content

         <h2>Logout</h2>

         You have been logged out of the application.

         <a href="index.xhtml">index</a>

#### Additional info

By default, after a logout is performed a redirect to the root / is performed. However, when defining the configuration property **logoutPage**, one can define another redirect target.

However, make sure that this page has no authorisation requirements and it can be accessed by an anonymous user. All resources in the main directory can be used by a user without the need to authenticate. Otherwise the login page will be shown before the logout page is rendered for the user.
